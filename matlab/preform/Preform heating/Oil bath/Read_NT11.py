#### Read_NT11.py
#### 1)to read time, average NT11 of given nodes
####   and export to the csv files
#### Created by Shiyong, 23/09/11
#### Modified for axi solid model, 23/04/12

#### Type "abq6101 script=Read_NT11.py" to execute this script

from odbAccess import *
from abaqusConstants import *
import csv
files = [90,95,100,105,110,115,120,125]
#files = [1]

for temperature in files:
    #### define the basic information ####
    # define name of the odb file
    odbFile = 'Heating_cycle_'+str(temperature)+'_tc5'
#    odbFile = 'Cooling_t120_1'
    # define the node numbers need to be exported
    time
    if not os.path.isdir('./'+odbFile+'/'):
        os.mkdir('./'+odbFile+'/')
    ####      do not modify below     ####

    # open odb file
    odb = openOdb(odbFile+'.odb')
    os.chdir('./'+odbFile+'/')

    print 'Reading NT11 from odb file ...'
    # read steps, frame
    step = odb.steps[odb.steps.keys()[-1]]
    frame = step.frames
    print 'Analysing ...'
    # read NE info of all frames
    total_time = frame[-1].frameValue
    for fr in frame:
        time = fr.frameValue
        if (time/total_time*50)%1 < 1e-3:
            if int(time/total_time*100) > 0:
                print 'Reading ' + str(int(time/total_time*100)) + '% ...'
        for node in range(1, odb.rootAssembly.instances['PART-1-1'].nodes[-1].label+1):
            for NT in fr.fieldOutputs['NT11'].values:
                if NT.nodeLabel == node:
                    timeNT11[node-1].append((time,NT.data))

    # write time and NT11 into csv files
    print 'Writing to csv files ...'
    for node in timeNT11:
        if len(node) != 0:
            csvFile = 'NT11_node_'+str(timeNT11.index(node)+1)+'.csv'
            wr = csv.writer(file(csvFile,'wb'))
            wr.writerows(node)
    os.chdir('../')        
